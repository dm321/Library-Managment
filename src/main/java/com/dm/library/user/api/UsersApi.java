/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.dm.library.user.api;

import com.dm.library.user.model.dto.UserCreateCommand;
import com.dm.library.user.model.dto.UserDto;
import com.dm.library.user.model.dto.UserUpdateCommand;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.Min;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import java.util.List;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-11-09T23:04:55.654481+01:00[Europe/Berlin]")
@Validated
@Api(value = "users", description = "the users API")
public interface UsersApi {

    default UsersApiDelegate getDelegate() {
        return new UsersApiDelegate() {};
    }

    /**
     * GET /users/
     *
     * @param limit  (optional)
     * @param markerUser Email of the last entry on the current page (optional)
     * @return List of users sucesfully retrived (status code 200)
     *         or Bad request (status code 400)
     */
    @ApiOperation(value = "", nickname = "usersGet", notes = "", response = UserDto.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of users sucesfully retrived", response = UserDto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request") })
    @GetMapping(
        value = "/users/",
        produces = { "application/json" }
    )
    default ResponseEntity<List<UserDto>> usersGet(@Min(0)@ApiParam(value = "") @Valid @RequestParam(value = "limit", required = false) Integer limit,@ApiParam(value = "Email of the last entry on the current page") @Valid @RequestParam(value = "markerUser", required = false) String markerUser) {
        return getDelegate().usersGet(limit, markerUser);
    }


    /**
     * DELETE /users/{personId} : Deletes the User
     *
     * @param personId  (required)
     * @return ok (status code 200)
     */
    @ApiOperation(value = "Deletes the User", nickname = "usersPersonIdDelete", notes = "", response = UserDto.class, tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok", response = UserDto.class) })
    @DeleteMapping(
        value = "/users/{personId}",
        produces = { "application/json" }
    )
    default ResponseEntity<UserDto> usersPersonIdDelete(@Pattern(regexp="^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$") @Size(min=36,max=36) @ApiParam(value = "",required=true) @PathVariable("personId") String personId) {
        return getDelegate().usersPersonIdDelete(personId);
    }


    /**
     * GET /users/{personId} : Reads User to passed personId
     *
     * @param personId  (required)
     * @return ok (status code 200)
     */
    @ApiOperation(value = "Reads User to passed personId", nickname = "usersPersonIdGet", notes = "", response = UserDto.class, tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok", response = UserDto.class) })
    @GetMapping(
        value = "/users/{personId}",
        produces = { "application/json" }
    )
    default ResponseEntity<UserDto> usersPersonIdGet(@Pattern(regexp="^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$") @Size(min=36,max=36) @ApiParam(value = "",required=true) @PathVariable("personId") String personId) {
        return getDelegate().usersPersonIdGet(personId);
    }


    /**
     * PUT /users/{personId} : Modifies the User
     *
     * @param personId  (required)
     * @param userUpdateCommand  (optional)
     * @return ok (status code 200)
     */
    @ApiOperation(value = "Modifies the User", nickname = "usersPersonIdPut", notes = "", response = UserDto.class, tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok", response = UserDto.class) })
    @PutMapping(
        value = "/users/{personId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserDto> usersPersonIdPut(@Pattern(regexp="^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$") @Size(min=36,max=36) @ApiParam(value = "",required=true) @PathVariable("personId") String personId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) UserUpdateCommand userUpdateCommand) {
        return getDelegate().usersPersonIdPut(personId, userUpdateCommand);
    }


    /**
     * POST /users/ : Creates a new user
     *
     * @param userCreateCommand  (optional)
     * @return User sucessfully created (status code 201)
     */
    @ApiOperation(value = "Creates a new user", nickname = "usersPost", notes = "", response = UserDto.class, tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "User sucessfully created", response = UserDto.class) })
    @PostMapping(
        value = "/users/",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserDto> usersPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) UserCreateCommand userCreateCommand) {
        return getDelegate().usersPost(userCreateCommand);
    }

}
