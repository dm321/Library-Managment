openapi: 3.0.0
info:
  version: 1.0.0
  title: library-managment
  description: System for borrowing books
paths:
  /users/:
    post:
      tags:
        - Users
      summary: Creates a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateCommand'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
          description: User sucessfully created
    get:
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/MarkerUser'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/UserDto'
          description: List of users sucesfully retrived
        '400':
          description: Bad request
  /users/{personId}:
    parameters:
        - in: path
          name: personId
          schema:
            $ref: '#/components/schemas/PersonIdType'
          required: true
    get:
      tags:
        - Users
      summary: Reads User to passed personId
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
    put:
      tags:
        - Users
      summary: Modifies the User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '200':
          content:
           application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
          description: ok
    delete:
      tags:
        - Users
      summary: Deletes the User
      responses:
        '200':
          content:
           application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
          description: ok
components:
  requestBodies:
    User:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserDto'
  parameters:
    Limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        minimum: 0
    MarkerUser:
      name: markerUser
      in: query
      description: Email of the last entry on the current page
      schema:
        type: string
  schemas:
    UserDto:
      type: object
      properties:
        personId:
          type: string
          pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
          minLength: 36
          maxLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
        firstName:
          type: string
          example: Dominik
          maxLength: 50
          minLength: 2
        lastName:
          type: string
          example: Wa
          maxLength: 50
          minLength: 2
        email:
          type: string
          pattern: /^\S+@\S+\.\S+$/
          example: example@test.com
    UserCreateCommand:
      type: object
      properties:
        firstName:
          type: string
          example: Dominik
          maxLength: 50
          minLength: 2
        lastName:
          type: string
          example: Wa
          maxLength: 50
          minLength: 2
        email:
          type: string
          pattern: /^\S+@\S+\.\S+$/
          example: example@test.com
    PersonIdType:
      type: string
      pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
      minLength: 36
      maxLength: 36
      example: 123e4567-e89b-12d3-a456-426614174000
      
          
          
servers:
  - description: SwaggerHub API Auto Mocking
    url: http://localhost:8080/library-managment/1.0.0