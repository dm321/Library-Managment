openapi: 3.0.0
info:
  version: 0.0.1
  title: library-managment
  description: System for borrowing books
paths:
  /users/:
    post:
      tags:
        - Users
      summary: Creates a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateCommand'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
          description: User sucessfully created
    get:
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Direction'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
          headers:
            'Pagination-Count':
              schema:
                type: integer
              description: Total number of items
            'Pagination-Page':
              schema:
                type: integer
              description: Current page number
            'Pagination-Limit':
              schema:
                type: integer
              description: Number of returned items
          description: List of users sucesfully retrived
        '400':
          description: Bad request
  /users/{personId}:
    parameters:
      - in: path
        name: personId
        schema:
          $ref: '#/components/schemas/PersonIdType'
        required: true
    get:
      tags:
        - Users
      summary: Reads User to passed personId
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
    put:
      tags:
        - Users
      summary: Modifies the User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateCommand'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
          description: ok
    delete:
      tags:
        - Users
      summary: Deletes the User
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
          description: ok
components:
  requestBodies:
    User:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserDto'
  parameters:
    Page:
      name: page
      in: query
      description: Current page number
      required: false
      schema:
        type: integer
        format: int32
        default: 1
        minimum: 1
    Limit:
      name: limit
      in: query
      description: Limits the number of returned items
      required: false
      schema:
        type: integer
        format: int32
        default: 10
        minimum: 10
        maximum: 100
        multipleOf: 10
    Sort:
      name: sort
      in: query
      explode: false
      required: false
      description: Sorting criteria for retriving list of user. Has to match with properties of User
      example: email,firstname
      style: form
      schema:
        type: array
        items:
          type: string
        minItems: 1
        maxItems: 2
    Direction:
      name: direction
      in: query
      required: false
      description: Direction of sorting
      example: desc,asc
      schema:
        type: string
        enum: [asc,desc]
        maximum: 1
        default: asc
  schemas:
    UserDto:
      type: object
      properties:
        personId:
          type: string
          pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
          minLength: 36
          maxLength: 36
          example: 123e4567-e89b-12d3-a456-426614174000
        firstName:
          type: string
          example: Dominik
          maxLength: 50
          minLength: 2
        lastName:
          type: string
          example: Wa
          maxLength: 50
          minLength: 2
        email:
          type: string
          pattern: /^\S+@\S+\.\S+$/
          example: example@test.com
    UserCreateCommand:
      type: object
      properties:
        firstName:
          type: string
          example: Dominik
          maxLength: 50
          minLength: 2
        lastName:
          type: string
          example: Wa
          maxLength: 50
          minLength: 2
        email:
          type: string
          pattern: /^\S+@\S+\.\S+$/
          example: example@test.com
    UserUpdateCommand:
      type: object
      properties:
        firstName:
          type: string
          example: Dominik
          maxLength: 50
          minLength: 2
        lastName:
          type: string
          example: Wa
          maxLength: 50
          minLength: 2
        email:
          type: string
          pattern: /^\S+@\S+\.\S+$/
          example: example@test.com
    PersonIdType:
      type: string
      pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
      minLength: 36
      maxLength: 36
      example: 123e4567-e89b-12d3-a456-426614174000




servers:
  - description: SwaggerHub API Auto Mocking
    url: http://localhost:8080/library-managment/1.0.0